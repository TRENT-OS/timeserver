/*
 * Copyright 2017, Data61
 * Commonwealth Scientific and Industrial Research Organisation (CSIRO)
 * ABN 41 687 119 230.
 *
 * This software may be distributed and modified according to the terms of
 * the BSD 2-Clause license. Note that NO WARRANTY is provided.
 * See "LICENSE_BSD2.txt" for details.
 *
 * @TAG(DATA61_BSD)
 */

/*
 *  TimeServer CAmkES Component
 *
 *  Copyright (C) 2020, Hensoldt Cyber GmbH
 *
 *
 *  to be used as:
 *
 *      #include "TimeServer/TimeServer.camkes"
 *
 *      TimeServer_COMPONENT_DECLARE(TimeServer_1)
 *      TimeServer_COMPONENT_DECLARE(TimeServer_2)
 *
 */

#include <plat/timers.h>

import <if_OS_Timer.camkes>;

import <timers.camkes>;

#include "LibMacros/ForEach.h"


//------------------------------------------------------------------------------


#ifdef HARDWARE_TIMER_COMPONENT
    HARDWARE_TIMER_COMPONENT
#endif


//------------------------------------------------------------------------------


#define TimeServer_COMPONENT_DECLARE( \
    _name_) \
    \
    component _name_ { \
        has   mutex             clientMux; \
        \
        emits TimerReady        timeServer_notify1; \
        emits TimerReady        timeServer_notify2; \
        emits TimerReady        timeServer_notify3; \
        emits TimerReady        timeServer_notify4; \
        emits TimerReady        timeServer_notify5; \
        emits TimerReady        timeServer_notify6; \
        emits TimerReady        timeServer_notify7; \
        emits TimerReady        timeServer_notify8; \
        provides if_OS_Timer    timeServer_rpc; \
        \
        attribute int timers_per_client = 4; \
        attribute int heap_size = 8192; \
        \
        HARDWARE_TIMER_INTERFACES \
        HARDWARE_TIMER_ATTRIBUTES \
        \
        composition { \
            HARDWARE_TIMER_COMPOSITION \
        } \
        \
        configuration { \
            HARDWARE_TIMER_CONFIG \
        } \
    }


//------------------------------------------------------------------------------


#define TimeServer_CLIENT_CONNECTOR( \
    _inst_, \
    _unused_, \
    _rpc_, \
    _evt_, \
    _num_) \
    \
    connection seL4RPCCall \
        _inst_ ## _rpc ## _num_ ( \
            from    _rpc_, \
            to      _inst_.timeServer_rpc \
        ); \
    connection seL4NotificationNative \
        _inst_ ## _evt ## _num_ ( \
            from    _inst_.timeServer_notify ## _num_, \
            to      _evt_ \
        );


#define TimeServer_INSTANCE_CONNECT_CLIENTS( \
    _inst_, \
    ...) \
    \
    FOR_EACH_2P(TimeServer_CLIENT_CONNECTOR,_inst_,UNUSED,__VA_ARGS__)


//------------------------------------------------------------------------------


#define TimeServer_INSTANCE_CONFIGURE( \
    _inst_, \
    _num_) \
    \
    _inst_.timers_per_client = _num_;


//------------------------------------------------------------------------------


// Assign a single badge; this is used internally
#define TimeServer_BADGE_ASSIGNER( \
    _unused0_, \
    _unused1_, \
    _rpc_, \
    _num_) \
    \
    _rpc_ ## _attributes = _num_;


#define TimeServer_CLIENT_ASSIGN_BADGE( \
    _client_rpc_, \
    _val_) \
    \
    _client_rpc_ ## _attributes = _val_;


#define TimeServer_CLIENT_ASSIGN_BADGES( \
    ...) \
    \
    FOR_EACH_1P(TimeServer_BADGE_ASSIGNER,UNUSED,UNUSED,__VA_ARGS__)
