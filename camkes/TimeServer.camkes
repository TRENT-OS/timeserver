/*
 * Copyright 2017, Data61
 * Commonwealth Scientific and Industrial Research Organisation (CSIRO)
 * ABN 41 687 119 230.
 *
 * This software may be distributed and modified according to the terms of
 * the BSD 2-Clause license. Note that NO WARRANTY is provided.
 * See "LICENSE_BSD2.txt" for details.
 *
 * @TAG(DATA61_BSD)
 */

/*
 *  TimeServer CAmkES Component
 *
 *  Copyright (C) 2020, Hensoldt Cyber GmbH
 *
 *
 *  to be used as:
 *
 *      #include "TimeServer/TimeServer.camkes"
 *
 *      DECLARE_COMPONENT_TimeServer(TimeServer_1)
 *      DECLARE_COMPONENT_TimeServer(TimeServer_2)
 *
 */

#include <plat/timers.h>

import <if_OS_Timer.camkes>;

import <global-connectors.camkes>;
import <timers.camkes>;

//------------------------------------------------------------------------------
// Component

#ifdef HARDWARE_TIMER_COMPONENT
    HARDWARE_TIMER_COMPONENT
#endif

#define DECLARE_COMPONENT_TimeServer(           \
    _name_)                                     \
                                                \
    component _name_ {                          \
        has mutex clientMux;                    \
                                                \
        emits Notification timer_notification;  \
                                                \
        provides if_OS_Timer timeServer_rpc;    \
                                                \
        attribute int timers_per_client = 4;    \
        attribute int heap_size = 8192;         \
                                                \
        HARDWARE_TIMER_INTERFACES               \
        HARDWARE_TIMER_ATTRIBUTES               \
                                                \
        composition {                           \
            HARDWARE_TIMER_COMPOSITION          \
        }                                       \
                                                \
        configuration {                         \
            HARDWARE_TIMER_CONFIG               \
        }                                       \
    }


//------------------------------------------------------------------------------
// Instance Connection

// Instantiate the connection as often as we have instances
#define TimeServer_FE_0(WHAT, N,I)
#define TimeServer_FE_1(WHAT, N,I,X)      WHAT(N,I,X,1)
#define TimeServer_FE_2(WHAT, N,I,X, ...) WHAT(N,I,X,2) TimeServer_FE_1(WHAT, N,I, __VA_ARGS__)
#define TimeServer_FE_3(WHAT, N,I,X, ...) WHAT(N,I,X,3) TimeServer_FE_2(WHAT, N,I, __VA_ARGS__)
#define TimeServer_FE_4(WHAT, N,I,X, ...) WHAT(N,I,X,4) TimeServer_FE_3(WHAT, N,I, __VA_ARGS__)
#define TimeServer_FE_5(WHAT, N,I,X, ...) WHAT(N,I,X,5) TimeServer_FE_4(WHAT, N,I, __VA_ARGS__)
#define TimeServer_FE_6(WHAT, N,I,X, ...) WHAT(N,I,X,6) TimeServer_FE_5(WHAT, N,I, __VA_ARGS__)
#define TimeServer_FE_7(WHAT, N,I,X, ...) WHAT(N,I,X,7) TimeServer_FE_6(WHAT, N,I, __VA_ARGS__)
#define TimeServer_GET_MACRO(_0,_1,_2,_3,_4,_5,_6,_7,NAME,...) TimeServer_ ## NAME
#define TimeServer_FOR_EACH(action, _name_, _inst_, ...) \
  TimeServer_GET_MACRO(_0,__VA_ARGS__,FE_7,FE_6,FE_5,FE_4,FE_3,FE_2,FE_1,FE_0) \
    (action,_name_,_inst_,__VA_ARGS__)

// Set a single connection
#define TimeServer_CONNECTION(_name_, _inst_, _caller_rpc_, _num_)      \
    connection  seL4TimeServer                                          \
        _name_ ## _ ## _inst_ ## _num_ ## _rpc(                         \
            from    _caller_rpc_,                                       \
            to      _inst_.timeServer_rpc);

/*
 * With the macro magic above we can use this macro with more than one
 * client, i.e.,
 *
 *      DECLARE_AND_CONNECT_INSTANCE_TimeServer(
 *          TimeServer,
 *          timeServer,
 *          client0.timeServer_rpc,
 *          client1.timeServer_rpc)
 */
#define DECLARE_AND_CONNECT_INSTANCE_TimeServer(                            \
    _name_,                                                                 \
    _inst_,                                                                 \
    ...)                                                                    \
                                                                            \
    component   _name_  _inst_;                                             \
                                                                            \
    TimeServer_FOR_EACH(TimeServer_CONNECTION, _name_, _inst_, __VA_ARGS__)


//------------------------------------------------------------------------------
// Configuration of instance

#define CONFIGURE_INSTANCE_TimeServer(          \
    _inst_,                                     \
    _num_clients_)                              \
                                                \
    _inst_.timers_per_client = _num_clients_;
